{
  "name": "node-gcm",
  "description": "a Node.JS wrapper library-port for Google Cloud Messaging for Android",
  "version": "0.10.0",
  "author": {
    "name": "Marcus Farkas",
    "email": "toothlessgear@finitebox.com"
  },
  "contributors": [
    {
      "name": "Marcus Farkas",
      "email": "toothlessgear@finitebox.com"
    },
    {
      "name": "monkbroc",
      "email": "jvanier@gmail.com"
    },
    {
      "name": "zlyinfinite"
    },
    {
      "name": "Yann Biancheri",
      "email": "yann.biancheri@gmail.com"
    },
    {
      "name": "Hamid Palo",
      "email": "hamid@fogcreek.com"
    },
    {
      "name": "Dotan J. Nahum",
      "email": "jondotan@gmail.com"
    },
    {
      "name": "Max Rabin",
      "email": "rabin.max@gmail.com"
    },
    {
      "name": "Olivier Poitrey",
      "email": "rs@dailymotion.com"
    },
    {
      "name": "George Miroshnykov",
      "email": "george.miroshnykov@gmail.com"
    },
    {
      "name": "Alejandro Garcia Gil",
      "email": "alejandro@ideaknow.com"
    },
    {
      "name": "Ismael Gorissen",
      "email": "ismael.gorissen@gmail.com"
    },
    {
      "name": "Joris Verbogt",
      "email": "joris@notifica.re"
    },
    {
      "name": "goelvivek",
      "email": "goelvivek2011@gmail.com"
    },
    {
      "name": "Lars Jacob",
      "email": "lars@jaclar.net"
    },
    {
      "name": "Roman Iakovlev",
      "email": "roman.iakovlev@here.com"
    },
    {
      "name": "Roman Skvazh",
      "email": "roman.skvazh@gmail.com"
    },
    {
      "name": "Jeremy Goldstein",
      "email": "jg-dev@live.com"
    },
    {
      "name": "Adam Patacchiola",
      "email": "adam@2fours.com"
    },
    {
      "name": "Ivan Longin",
      "email": "ivan.longin@infobip.com"
    },
    {
      "name": "Paul Bininda",
      "email": "paul@bininda.com"
    },
    {
      "name": "Matt Merkes",
      "email": "matt.merkes@gmail.com"
    },
    {
      "name": "Niels Roesen Abildgaard",
      "email": "niels.abildgaard@gmail.com"
    },
    {
      "name": "Nonemoticoner",
      "email": "nonemoticoner@gmail.com"
    },
    {
      "name": "Simen Bekkhus",
      "email": "sbekkhus91@gmail.com"
    },
    {
      "name": "Alexander Johansson",
      "email": "alex@dice.fm"
    },
    {
      "name": "Ashwin R",
      "email": "ashrko619@gmail.com"
    },
    {
      "name": "Kaija Chang",
      "email": "kaija.chang@gmail.com"
    }
  ],
  "repository": {
    "type": "git",
    "url": "http://github.com/ToothlessGear/node-gcm.git",
    "web": "http://github.com/ToothlessGear/node-gcm"
  },
  "keywords": [
    "google",
    "cloud",
    "push",
    "notifications",
    "android",
    "c2dm",
    "gcm"
  ],
  "main": "index",
  "files": [
    "index.js",
    "lib/"
  ],
  "scripts": {
    "test": "mocha test/**/*Spec.js"
  },
  "dependencies": {
    "request": "^2.27.0",
    "debug": "^0.8.1"
  },
  "devDependencies": {
    "chai": "^2.2.0",
    "mocha": "^2.2.4",
    "proxyquire": "^1.4.0",
    "sinon": "^1.14.1"
  },
  "optionalDependencies": {},
  "engines": {
    "node": ">= 0.10.0"
  },
  "bugs": {
    "url": "https://github.com/ToothlessGear/node-gcm/issues"
  },
  "homepage": "https://github.com/ToothlessGear/node-gcm",
  "directories": {
    "test": "test"
  },
  "license": "MIT",
  "readme": "# node-gcm\r\n\r\nnode-gcm is a Node.JS library for [**Google Cloud Messaging for Android**](http://developer.android.com/guide/google/gcm/index.html), which replaces Cloud 2 Device Messaging (C2DM).\r\n\r\n## Installation\r\n```bash\r\n$ npm install node-gcm\r\n```\r\n##Requirements\r\n\r\nAn Android device running 2.2 or newer and an API key as per [GCM getting started guide](http://developer.android.com/guide/google/gcm/gs.html).\r\n\r\n## Example application\r\nAccording to below **Usage** reference, we could create such application:\r\n\r\n```js\r\nvar gcm = require('node-gcm');\r\n\r\nvar message = new gcm.Message();\r\n\r\nmessage.addData('key1', 'msg1');\r\n\r\nvar regIds = ['YOUR_REG_ID_HERE'];\r\n\r\n// Set up the sender with you API key\r\nvar sender = new gcm.Sender('YOUR_API_KEY_HERE');\r\n\r\n//Now the sender can be used to send messages\r\nsender.send(message, regIds, function (err, result) {\r\n\tif(err) console.error(err);\r\n\telse \tconsole.log(result);\r\n});\r\n\r\nsender.sendNoRetry(message, regIds, function (err, result) {\r\n\tif(err) console.error(err);\r\n\telse \tconsole.log(result);\r\n});\r\n```\r\n\r\n## Usage\r\n\r\n```js\r\nvar gcm = require('node-gcm');\r\n\r\n// Create a message\r\n// ... with default values\r\nvar message = new gcm.Message();\r\n\r\n// ... or some given values\r\nvar message = new gcm.Message({\r\n\tcollapseKey: 'demo',\r\n\tdelayWhileIdle: true,\r\n\ttimeToLive: 3,\r\n\tdata: {\r\n\t\tkey1: 'message1',\r\n\t\tkey2: 'message2'\r\n\t}\r\n});\r\n\r\n// Change the message data\r\n// ... as key-value\r\nmessage.addData('key1','message1');\r\nmessage.addData('key2','message2');\r\n\r\n// ... or as a data object (overwrites previous data object)\r\nmessage.addData({\r\n\tkey1: 'message1',\r\n\tkey2: 'message2'\r\n});\r\n\r\n// Change the message variables\r\nmessage.collapseKey = 'demo';\r\nmessage.delayWhileIdle = true;\r\nmessage.timeToLive = 3;\r\nmessage.dryRun = true;\r\n\r\n// Set up the sender with you API key\r\nvar sender = new gcm.Sender('insert Google Server API Key here');\r\n\r\n// Add the registration IDs of the devices you want to send to\r\nvar registrationIds = [];\r\nregistrationIds.push('regId1');\r\nregistrationIds.push('regId2');\r\n\r\n// Send the message\r\n// ... trying only once\r\nsender.sendNoRetry(message, registrationIds, function(err, result) {\r\n  if(err) console.error(err);\r\n  else    console.log(result);\r\n});\r\n\r\n// ... or retrying\r\nsender.send(message, registrationIds, function (err, result) {\r\n  if(err) console.error(err);\r\n  else    console.log(result);\r\n});\r\n\r\n// ... or retrying a specific number of times (10)\r\nsender.send(message, registrationIds, 10, function (err, result) {\r\n  if(err) console.error(err);\r\n  else    console.log(result);\r\n});\r\n```\r\nNotice that [you can *at most* send notifications to 1000 registration ids at a time](https://github.com/ToothlessGear/node-gcm/issues/42).\r\nThis is due to [a restriction](http://developer.android.com/training/cloudsync/gcm.html) on the side of the GCM API.\r\n\r\n\r\n## Notification usage\r\n\r\n```js\r\n\r\nvar message = new gcm.Message();\r\n\r\n// Add notification payload as key value\r\nmessage.addNotification('title', 'Alert!!!');\r\nmessage.addNotification('body', 'Abnormal data access');\r\nmessage.addNotification('icon', 'ic_launcher');\r\n\r\n// as object\r\nmessage.addNotification({\r\n  title: 'Alert!!!',\r\n  body: 'Abnormal data access',\r\n  icon: 'ic_launcher'\r\n});\r\n\r\n```\r\n\r\n### Notification payload option table\r\n\r\n|Parameter|Platform|Usage|Description|\r\n|---|---|---|---|\r\n|title|Android, iOS (Watch)|equired (Android), Optional (iOS), string|Indicates notification title. This field is not visible on iOS phones and tablets.|\r\n|body|Android, iOS|Optional, string|Indicates notification body text.|\r\n|icon|Android|Required, string|Indicates notification icon. On Android: sets value to myicon for drawable resource myicon.png.|\r\n|sound|Android, iOS|Optional, string|Indicates sound to be played. Supports only default currently.|\r\n|badge|iOS|Optional, string|Indicates the badge on client app home icon.|\r\n|tag|Android|Optional, string|Indicates whether each notification message results in a new entry on the notification center on Android. If not set, each request creates a new notification. If set, and a notification with the same tag is already being shown, the new notification replaces the existing one in notification center.|\r\n|color|Android|Optional, string|Indicates color of the icon, expressed in #rrggbb format|\r\n|click_action|Android, iOS|Optional, string|The action associated with a user click on the notification. On Android, if this is set, an activity with a matching intent filter is launched when user clicks the notification. For example, if one of your Activities includes the intent filter: (Appendix:1)Set click_action to OPEN_ACTIVITY_1 to open it. If set, corresponds to category in APNS payload.|\r\n|body_loc_key|iOS|Optional, string|Indicates the key to the body string for localization. On iOS, this corresponds to \"loc-key\" in APNS payload.|\r\n|body_loc_args|iOS|Optional, JSON array as string|Indicates the string value to replace format specifiers in body string for localization. On iOS, this corresponds to \"loc-args\" in APNS payload.|\r\n|title_loc_args|iOS|Optional, JSON array as string|Indicates the string value to replace format specifiers in title string for localization. On iOS, this corresponds to \"title-loc-args\" in APNS payload.|\r\n|title_loc_key|iOS|Optional, string|Indicates the key to the title string for localization. On iOS, this corresponds to \"title-loc-key\" in APNS payload.|\r\n\r\nNotice notification payload defined in [GCM Connection Server Reference](https://developers.google.com/cloud-messaging/server-ref#table1)\r\n\r\n## Debug\r\nTo enable debug mode (print requests and responses to and from GCM),\r\nset the `DEBUG` environment flag when running your app (assuming you use `node app.js` to run your app):\r\n\r\n```bash\r\nDEBUG=node-gcm node app.js\r\n```\r\n\r\n## Donate\r\n\r\n Bitcoin: [13iTQf7tDhrKgibw2Y3U5SyPJa7R8sQmHQ](https://blockchain.info/address/13iTQf7tDhrKgibw2Y3U5SyPJa7R8sQmHQ)\r\n\r\n## Contributing\r\n\r\nDo you see an issue in the code that is not represented by the [issues](https://github.com/ToothlessGear/node-gcm/issues), please do create it.\r\n\r\nIf you want to help solve an issue, please [submit a Pull Request](https://github.com/ToothlessGear/node-gcm/compare) (PR).\r\nIf the PR aims to solve a known issue, please refer this issue in your description.\r\nMake sure that your PR explains what problem it solves, and any key decisions made in regards to this.\r\nMake the PR *early* so maintainers and other contributors get a chance to give input on your code and how it fits in the bigger picture.\r\n\r\nAny help is much appreciated!\r\n\r\n## Contributors\r\n * [monkbroc](https://github.com/monkbroc)\r\n * [zlyinfinite](https://github.com/zlyinfinite)\r\n * [Yann Biancheri](https://github.com/yannooo)\r\n * [Hamid Palo](https://github.com/hamidp)\r\n * [Dotan J.Nahum](https://github.com/jondot)\r\n * [Olivier Poitrey](https://github.com/rs)\r\n * [Max Rabin](https://github.com/maxrabin)\r\n * [George Miroshnykov](https://github.com/laggyluke)\r\n * [Alejandro Garcia](https://github.com/Alegege)\r\n * [Ismael Gorissen](https://github.com/igorissen)\r\n * [Joris Verbogt](https://github.com/silentjohnny)\r\n * [goelvivek](https://github.com/goelvivek)\r\n * [Lars Jacob](https://github.com/jaclar)\r\n * [Roman Iakovlev](https://github.com/RomanIakovlev) \r\n * [Roman Skvazh](https://github.com/rskvazh)\r\n * [Jeremy Goldstein](https://github.com/jg10)\r\n * [Adam Patacchiola](https://github.com/surespot)\r\n * [Ivan Longin](https://github.com/ilongin)\r\n * [Paul Bininda](https://github.com/pbininda)\r\n * [Niels Roesen Abildgaard](https://github.com/hypesystem)\r\n * [Nonemoticoner](https://github.com/Nonemoticoner)\r\n * [Simen Bekkhus](https://github.com/SimenB)\r\n * [Alexander Johansson](https://github.com/KATT)\r\n * [Ashwin R](https://github.com/ashrko619)\r\n * [kaija](https://github.com/kaija)\r\n\r\n## License \r\n\r\n(The MIT License)\r\n\r\nCopyright (c) 2013 Marcus Farkas &lt;toothlessgear@finitebox.com&gt;\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining\r\na copy of this software and associated documentation files (the\r\n'Software'), to deal in the Software without restriction, including\r\nwithout limitation the rights to use, copy, modify, merge, publish,\r\ndistribute, sublicense, and/or sell copies of the Software, and to\r\npermit persons to whom the Software is furnished to do so, subject to\r\nthe following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be\r\nincluded in all copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\r\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\r\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\r\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\r\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n",
  "readmeFilename": "README.md",
  "_id": "node-gcm@0.10.0",
  "dist": {
    "shasum": "98a9f920cfc4254c87f478b9d8ab93222a9035b4"
  },
  "_from": "node-gcm@0.10.0",
  "_resolved": "https://registry.npmjs.org/node-gcm/-/node-gcm-0.10.0.tgz"
}
